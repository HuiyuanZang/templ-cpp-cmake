name: CMake Build Matrix

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main

env:
  BUILD_TYPE: Release

jobs:
  configure:
    name: Configure Build Matrix
    runs-on: [self-hosted, linux, X64]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.REPO_TOKEN}}
      - id: set-matrix
        run: |
          JSON=$(cat .github/workflows/cmake_config.json)
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=matrix::${JSON}"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  build:
    needs: configure
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.configure.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.REPO_TOKEN}}
          submodules: true
      - name: Install dependencies
        run: |
          ${{ matrix.config.dependencies }}

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-v1-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-v1-

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
              ${{ matrix.config.cmake_flags }}
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "600M")
          endif()
          execute_process(COMMAND ccache -p)
          execute_process(COMMAND ccache -z)
          execute_process(
            COMMAND cmake --build build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: ccache statistics
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          execute_process(COMMAND ccache -s)

      - name: Run tests
        shell: cmake -P {0}
        run: |
          if(NOT ${{ matrix.config.cmake_flags }} STREQUAL "")
            set(LIST "${{ matrix.config.cmake_flags }}")
            string(REPLACE " " ";" MY_LIST ${LIST})
            foreach(pair IN LISTS MY_LIST)
              string(FIND "${pair}" "=" pos)
              if(pos LESS 1)
                message(WARNING "Skipping malformed pair (no var name): ${pair}")
              else()
                math(EXPR pos "${pos} - 2") # Decrease position by 2 to accomodate for -D
                string(SUBSTRING "${pair}" 2 "${pos}" var) # Skip -D
                math(EXPR pos "${pos} + 3") # Skip the separator
                string(SUBSTRING "${pair}" "${pos}" -1 val)
                set("${var}" "${val}")
              endif()
            endforeach()
          endif()
          if(NOT CROSS_COMPILE)
            include(ProcessorCount)
            ProcessorCount(N)
            set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
            execute_process(
              COMMAND ctest -j ${N}
              WORKING_DIRECTORY build
              RESULT_VARIABLE result
              OUTPUT_VARIABLE output
              ERROR_VARIABLE output
              ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
            )
            if (NOT result EQUAL 0)
              string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
              string(REPLACE "\n" "%0A" test_results "${test_results}")
              message("::error::${test_results}")
              message(FATAL_ERROR "Running tests failed!")
            endif()
          else()
            message(STATUS "Unable to run tests when cross-compiling")
          endif()

      - if: ${{ contains(matrix.config.artifact_extension, 'deb') && !contains(matrix.config.os, 'Windows') }}
        name: Create .deb Package
        run: cmake -B build -DCPACK_OUTPUT_FILE_PREFIX=${{ github.workspace }}/packages/automated -DCPACK_PACKAGE_FILE_NAME=${{ matrix.config.artifact }} ${{ matrix.config.cmake_flags }} ; cmake --build build --target package ; echo "artifactPath=${{ matrix.config.artifact }}.${{ matrix.config.artifact_extension }}" >> $GITHUB_ENV

      - if: ${{ matrix.config.artifact_extension == '' }}
        name: Create Asset
        run: cmake --install build --prefix packages/automated/${{ matrix.config.artifact }} --strip ; echo "artifactPath=${{ matrix.config.artifact }}" >> $GITHUB_ENV

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          path: packages/automated/${{ env.artifactPath }}
          name: ${{ matrix.config.artifact }}
          retention-days: 5
